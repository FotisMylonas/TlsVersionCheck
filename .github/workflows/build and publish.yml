name: Build and publish

on:
  push:
    tags:
      - 'v*'
      
env:
  PROJECT_PATH: 'TlsVersionCheck/TlsVersionCheck.csproj'
  RELEASE_OUTPUT_DIRECTORY: ${{ github.workspace }}\output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
  
jobs:
  build:
    name: 'Deploy'
    runs-on: 'windows-latest'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        
      - name: 'Install dotnet'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          
      - name: 'Restore packages'
        run: dotnet restore ${{ env.PROJECT_PATH }}
        
      - name: 'Publish single executable'
        run: dotnet publish ${{ env.PROJECT_PATH }} --no-restore --configuration Release -r win-x64 /p:PublishSingleFile=true --output ${{env.RELEASE_OUTPUT_DIRECTORY }}
        
      - name: 'Get version'
        id: version
        uses: battila7/get-version-action@v2        
        
      #- name: 'Upload the binary artifacts'
        #uses: actions/upload-artifact@v2
        #with:
          #name: 'TlsVersionCheck.exe'
          #path: ${{ env.RELEASE_OUTPUT_DIRECTORY }}
          
      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version-without-v }}
          release_name: Release V ${{ steps.version.outputs.version-without-v }}
          draft: false
          prerelease: false
          
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - uses: actions/checkout@v1

      - name: Fetch action
        id: pl
        uses: Rishabh510/Path-lister-action@master
        with:
          path: ${{ env.RELEASE_OUTPUT_DIRECTORY }}
          type: '.*'

      - name: Output results
        run: |
          echo "Found ${{ steps.pl.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.pl.outputs.paths }}; do
          echo $i
          done          
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ env.RELEASE_OUTPUT_DIRECTORY }}
          asset_name: 'TlsVersionCheck.zip'
          asset_content_type: application/zip          